{"name":"kurt","body":"Kurt is a Python library for reading/writing Scratch project (.sb) and sprite files.\r\n\r\nSo far, it can read/write sprites and their properties, including scripts, blocks, variables, and lists. It can read costumes and export them to separate image files. It can also export scripts to `scratchblocks` format for pasting into the Scratch forums/wiki.\r\n\r\nYou could use it for:\r\n\r\n* converting to another format (like the `scratchblocks` converter does)\r\n* generating Scratch projects using Python code\r\n* analysing the scripts in a project\r\n* *(someday, perhaps...)* making a \"Scratch IDE\" text-based editor for Scratch scripts... :)\r\n\r\n(It *can't* write images as costumes or read/write sounds yet, but they're on the to-do list — see below)\r\n\r\n**WARNING**: Make sure you take a backup of your Scratch projects before saving anything with kurt! kurt is by no means fully tested. I can't accept responsibility for corrupting your files.\r\n\r\nIf you're interested in technical details of how the format works: the code should be pretty self-documenting; but check out the documentation on the [Scratch wiki](http://wiki.scratch.mit.edu/wiki/Scratch_File_Format), which might be more readable...\r\n\r\n\r\n## Installation\r\n\r\nDownload the latest version of Kurt and extract the `kurt` folder somewhere in your `sys.path` — or in the same directory as your code, if you prefer.\r\n\r\nYou'll need the **latest version** of the awesome [**Construct**](http://construct.wikispaces.com/) library — used for defining the format. It currently appears to be available [here](http://pypi.python.org/pypi/construct). (I'm using Construct version 2.04).\r\n\r\nFor saving images, you'll need the [**PyPNG**](https://code.google.com/p/pypng/) module. Kurt *should* work without it, if you don't want to save images — but it's strongly recommended.\r\n\r\nTested with **Python 2.6**. Works with **Scratch 1.4**; not tested with earlier versions, but possibly works.\r\n\r\n[Scratch](http://scratch.mit.edu/) is created by the Lifelong Kindergarten Group at the MIT Media Lab.\r\n\r\n\r\n## Recent Changes \r\n\r\n###v1.2, images:\r\n* Can now parse images! :D\r\n\r\n\tWell, most images. If not, try reloading the project with Scratch and saving it again — this sometimes helps.\r\n\t\r\n\tUnfortunately, Kurt doesn't compress the images when saving them back to the file again (yet), so it may massively increase your file size :P Again, you can just open it in Scratch and save it again, and the file size will be back to normal.\r\n\r\n* Split Sprite.media into separate costumes/sounds lists.\r\n\r\n###v1.1, scripts:\r\n\r\n* `Script` and `Block` classes for manipulating scripts.\r\n* **Block plugin** formatter — reads all the scripts in a project file and outputs `[scratchblocks]` syntax code for posting on the Scratch forums/wiki.\r\n* Filled out the `_fields` list for most of the objects in `user_objects` from the Squeak source (not the unused ones), so there should now be no \"undefined\" fields.\r\n* `Color` is now parsed correctly\r\n* Added `ScratchProjectFile.sprites` shortcut as an alias for `project.stage.sprites`\r\n\r\n\r\n## Usage\r\n\r\nHere's a quick getting started — grab a Python interpreter (Python's `>>>` prompt — just type `python` into your terminal, or load up IDLE), and have a go!\r\n\r\nYou'll probably just want to use the provided `ScratchProjectFile` and `ScratchSpriteFile` classes. Load them by passing the path to the file to their constructor and use their provided `.save()` methods.\r\n\r\nYou can import just these classes them using:\r\n\r\n    from kurt.files import *\r\n\r\nLoad a file (you'll find a preview file, `game.sb`, saved in the `tests` directory; but feel free to try it with any Scratch project file).\r\n\r\n\t# Just pass in the absolute or relative path to the file:\r\n\tproject = ScratchProjectFile(\"tests/game.sb\")\r\n\t\r\n    # You can reload the file at any time with .load()\r\n\r\nInspect project:\r\n\r\n    project.info['author'] # u'blob8108'\r\n    project.stage # <ScratchStageMorph(Stage)>\r\n    \r\n    # List fields on object:\r\n    project.stage.fields.keys() # ['volume', 'hPan', 'sprites', 'lists', 'vars', 'obsoleteSavedState', 'color', 'media', 'sceneStates', 'bounds', 'submorphs', 'zoom', 'isClone', 'blocksBin', 'flags', 'objName', 'owner', 'tempoBPM', 'vPan', 'properties', 'costume']\r\n\r\n    # Access fields using dot notation:\r\n    project.stage.tempoBPM # 60\r\n    project.stage.sprites # OrderedCollection([<ScratchSpriteMorph(ScratchCat)>])\r\n    \r\n    cat = project.stage.sprites[0]\r\n    cat.name # u'ScratchCat'\r\n\r\nMost of the objects you're interested in, like `ScratchStageMorph` and `ScratchSpriteMorph`, inherit from `UserObject`. You can use `.fields.keys()` to see the available fields on one of these objects.\r\n\r\n`FixedObjects` like `OrderedCollection` have a `.value` property to access their value.\r\n\r\nInline objects, such as `int` and `bool`, are converted transparently to their Pythonic counterparts. `Array` and `Dictionary` are converted to `list` and `dict`, too. \r\n\r\nMake changes:\r\n\r\n    cat.vars # {u'vx': 0.0}\r\n    cat.vars['vx'] = 100\r\n\r\nSave:\r\n\r\n    project.save()\r\n\r\nNow re-open the project with Scratch!\r\n\r\nEverything should, of course, work perfectly; if you have any problems, please file an issue, and I'll take a look! (:\r\n\r\n### Scripts\r\nA list of scripts can be found on the `scripts` property of both sprites and the stage.\r\n\r\n    >>> cat.scripts\r\n    [Script(Point(23, 36.0),\r\n\tBlock('EventHatMorph', 'Scratch-StartClicked'),\r\n\tBlock('xpos:', 0),\r\n\tBlock('doForever',  [\r\n\t\t\tBlock('doIf', \r\n\t\t\t\tBlock('keyPressed:', 'right arrow'),\r\n\t\t\t\t[\r\n\t\t\t\t\tBlock('changeVariable', u'vx', <#changeVar:by:>, 2),\r\n\t\t\t\t]),\r\n\t\t\tBlock('doIf', \r\n\t\t\t\tBlock('keyPressed:', 'left arrow'),\r\n\t\t\t\t[\r\n\t\t\t\t\tBlock('changeVariable', u'vx', <#changeVar:by:>, -2),\r\n\t\t\t\t]),\r\n\t\t\tBlock('changeVariable', u'vx', <#setVar:to:>, \r\n\t\t\t\tBlock('*', \r\n\t\t\t\t\tBlock('readVariable', u'vx'),\r\n\t\t\t\t0.80000000000000004),\r\n\t\t\t),\r\n\t\t\tBlock('changeXposBy:', \r\n\t\t\t\tBlock('readVariable', u'vx'),\r\n\t\t\t),\r\n\t\t]))]\r\n\r\nUse the `to_block_plugin` method to print them nicely:\r\n\r\n    >>> print cat.scripts[0].to_block_plugin()\r\n    when green flag clicked\r\n    set x to (0)\r\n    forever\r\n        if <key [right arrow v] pressed?>\r\n            change [vx v] by (2)\r\n        end\r\n        if <key [left arrow v] pressed?>\r\n            change [vx v] by (-2)\r\n        end\r\n        set [vx v] to ((vx) * (0.8))\r\n        change x by (vx)\r\n    end\r\n\r\nThis is identical to `scratchblocks` format, so you can paste them straight into the Scratch forums or wiki.\r\n\r\nYou'll find a script for automatically exporting all the scripts in a project file to `scratchblocks` format under `util/block_plugin.py`. Just pass it the path to your project file. For example:\r\n\r\n    python util/block_plugin.py tests/game.sb\r\n\r\n### Images\r\nYou can find costumes under a sprite's `costumes` property (similarly for stage `backgrounds`).\r\n\r\n    cat.costumes # [<ImageMedia(costume1)>, <ImageMedia(costume2)>]\r\n    image = cat.costumes[0]\r\n\r\nSave to an external file:\r\n\r\n    image.save(\"scratch_cat.png\")\r\n\r\nThere's a script under `util/export_images.py` for exporting all the costumes in a Scratch project to separate files, with a folder for each sprite. It automatically makes a folder with the name `<project name> files` to put the images in. Again, just pass it the path to your project.\r\n\r\n    $ python util/export_images.py tests/game.sb \r\n    $ ls \"tests/game files\"\r\n    ScratchCat\r\n    $ ls \"tests/game files/ScratchCat\"\r\n    costume1.png\tcostume2.png\r\n\r\n## Licence\r\n\r\nKurt is released under the [LGPL](http://www.gnu.org/licenses/lgpl) Version 3 (or any later version).\r\n\r\nI'm not a lawyer; but I _think_ this means while you can use Kurt in your own, non-GPL'd code, any Kurt modifications must be distributed under the (L)GPL and include the source code. _(This is not legal advice and does not affect the terms as stated in the licence...)_\r\n\r\n\r\n## Todo\r\n\r\n* <s>Parse images</s> DONE! :D\r\n\t* Compress Bitmap to ByteArray on save (using run-length encoding)\r\n\t* Images with depth `16` are not supported *(need an example)*\r\n\t* Images with depth `1` and `2` are buggy\r\n\t* Default color values — `squeak_colors` *(need an example)*\r\n\r\n* Import images from a separate `.png` or `.jpg` file and save them into a Scratch file.\r\n\r\n* Make some decent tests\r\n\r\n* Read/write external Sound files\r\n\r\n* \"Default project\" for building projects entirely \"from scratch\" (as it were) in Python code?\r\n\r\n* Optimise `ObjectNetworkAdapter` for building large files.\t\r\n\r\n\tKurt is currently very quick at parsing files; but pretty slow at writing them, particularly ones with very long scripts.\r\n\r\n* Optimise image parsing.\r\n\r\n\r\n","tagline":"Python library for reading/writing MIT's Scratch file format.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}