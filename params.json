{"google":"","body":"### A De/compiler\r\n\r\nKurt can convert to/from a **folder structure of scripts and images**. You can decompile a project into its parts, edit the scripts as block plugin/“scratchblocks” code in a text editor (and images in an image editor), then recompile again. See [Using the Compiler](#using-the-compiler).\r\n\r\n### A Python library\r\n\r\nKurt's also a Python library for reading/writing **Scratch project** (`.sb`) **& sprite files**. You can load the files, look at their internal structure — including sprites, scripts, variables, images, etc — make changes, and save them again! You can generate Scratch projects from Python code.\r\n\r\nYou could use it for:\r\n\r\n* generating Scratch projects using Python code\r\n* analysing the scripts in a project ([example](https://gist.github.com/2967355))\r\n* converting to another format (like the `scratchblocks` converter does)\r\n\r\nIt *can't* read/write sounds yet, but they're on the [to-do list](#todo) — see below. Everything else works (as far as I'm aware).\r\n\r\n\r\n**WARNING**: Make sure you take backups of your Scratch projects before saving anything with kurt! I can't accept responsibility for corrupting your files.\r\n\r\n\r\n\r\n### The Scratch file format \r\n\r\nIf you're interested in technical details of how the format works: the code should be pretty self-documenting, but do check out the documentation on the [Scratch wiki](http://wiki.scratch.mit.edu/wiki/Scratch_File_Format), which might be more readable...\r\n\r\n[Scratch](http://scratch.mit.edu/) is created by the Lifelong Kindergarten Group at the MIT Media Lab.\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Installation\r\n\r\nOptions 1 and 2 will automatically install kurt and its dependencies. *The installer (options 1 and 2) is thanks to [bboe](http://github.com/bboe)! :)*\r\n\r\nPlease make sure you have at least **Python 2.6**. Tested with **Scratch 1.4**; not tested with earlier versions, but possibly works.\r\n\r\n\r\n### Option 1: pip or easy_install\r\n\r\nIf you have either `easy_install` or `pip` installed, installation is as simple as running one of the following:\r\n\r\n    pip install kurt\r\n    easy_install kurt\r\n\r\nSee [how to install pip](http://www.pip-installer.org/en/latest/installing.html) if you don't have it already.\r\n\r\n\r\n### Option 2: setup.py\r\n\r\nDownload (or git clone) the latest version of Kurt. From the kurt folder containing `setup.py` run:\r\n\r\n    python setup.py install\r\n\r\n\r\n### Option 3: manual install\r\n\r\nDownload the latest version of Kurt and extract the `kurt` folder somewhere in your `sys.path` — or in the same directory as your code, if you prefer.\r\n\r\nYou also need:\r\n\r\n* The **latest version** (2.04+) of the awesome [**Construct**](http://construct.wikispaces.com/) library: [download Construct here](http://pypi.python.org/pypi/construct).\r\n\r\n* **[PIL](http://www.pythonware.com/products/pil/)**, for saving images.\r\n\r\n* **[PLY](http://www.dabeaz.com/ply/)**, for parsing block plugin syntax\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Using the Compiler\r\n\r\n*Skip to [Using the Library](#using-the-library) if you only want to use Kurt to make your own awesome Python stuff*\r\n\r\n    Scratch project  <--->  folder structure of scripts and images\r\n\r\nIf you install using easy_install, pip, or setup.py, the script `kurtc.py` should automatically be in your path. Try running it from the command line:\r\n    \r\n    $ kurtc.py\r\n\r\nYou should see a screenful of help text. If not, try installing again using options 1 or 2. Alternatively, the script can be found under `util/kurtc.py`.\r\n\r\nThere are two commands: `compile`, and `decompile`.\r\n\r\n\r\n### Decompile\r\n\r\n    scratch project -> folder structure with project contents\r\n\r\nExports all the scripts, images, variables, lists in a Scratch project to separate files, with a folder for each sprite. Puts everything in a folder named `<project name> files`. (Think a Scratch [project summary](#note1) on steroids.)\r\n\r\nJust pass the path to your project file:\r\n\r\n    $ kurtc.py decompile tests/game.sb\r\n\r\nAnd get a folder structure a bit like this:\r\n\r\n    game files/\r\n        00 Stage/                                   [each sprite has its own directory]\r\n            backgrounds/\r\n                01 background1.png\r\n            backgrounds.txt\r\n            lists/\r\n            scripts/\r\n            variables.txt\r\n        01 ScratchCat/\r\n            costumes/\r\n                01 costume1.png                     [export to PNG or JPG format files,\r\n                02 costume2.jpg                      import from most formats]\r\n            costumes.txt                            [costume details, rotation centers]\r\n            lists/                                  [.txt file for each list]\r\n            scripts/                                [.txt files: block plugin syntax]\r\n                01 when green flag clicked.txt\r\n            variables.txt                           [variable = value, one per line]\r\n        notes.txt\r\n        thumbnail.png\r\n\r\nMost of the subfolders are optional when compiling.\r\n\r\nNotes:\r\n\r\n* Scripts are in [Block Plugin](wiki.scratch.mit.edu/wiki/Block_Plugin) (\"scratchblocks\") syntax.\r\n* `costumes.txt` is entirely optional — you should probably ignore it.\r\n* Lists have one item per line.\r\n* Variable files have one variable per line, like `variable = value`.\r\n* Any un-numbered files/folders will be added last.\r\n\r\n\r\n### Compile\r\n\r\n    folder structure -> scratch project\r\n\r\nTakes a folder structure generated by decompile as an argument, and compiles all the images and scripts back into a .sb file.\r\n\r\nTry decompiling the provided `game.sb`, edit one of the scripts, and then compiling it!\r\n\r\nAgain, just pass it the path to your project folder:\r\n\r\n    $ kurtc.py compile \"tests/game files\"\r\n\r\n\r\n### Notes & Restrictions\r\n\r\n* Sprite information such as position isn't saved — so make sure you set it in a \"when green flag clicked\" script (which is probably good practice anyway).\r\n\r\n* Parser SyntaxErrors currently report line numbers -2 the actual file. This is a bug.\r\n\r\n* Take care with the \"length of\" block: strings aren't dropdowns, lists are\r\n\r\n        length of [Hello!]      // string\r\n        length of [list v]      // list\r\n    \r\n* Variable names (and possibly other values, such as broadcasts) **can't**:\r\n\r\n    * contain special identifiers (like `end`, `if`, etc.)\r\n    * have trailing whitespace\r\n    * contain special characters, rather obviously: like any of `[]()<>` or equals `=`\r\n    * be named after a block, eg. a variable called \"wait until\" ([a screenshot](http://cl.ly/image/3z0X3O1O0m1w))\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Using the Library\r\n\r\n**Getting Started** | [Scripts](#scripts) | [Images](#images)\r\n\r\nHere's a quick getting started — grab a Python interpreter (Python's `>>>` prompt — just type `python` into your terminal, or load up IDLE), and have a go!\r\n\r\nYou'll probably just want to use the provided `ScratchProjectFile` and `ScratchSpriteFile` classes. Load them by passing the path to the file to their constructor and use their provided `.save()` methods.\r\n\r\nYou can import just these classes them using:\r\n\r\n    >>> from kurt.files import *\r\n\r\nLoad a file (you'll find a preview file, `game.sb`, saved in the `tests` directory; but feel free to try it with any Scratch project file).\r\n\r\nJust pass in the absolute or relative path to the file:\r\n\r\n    >>> project = ScratchProjectFile(\"tests/game.sb\")\r\n    \r\nYou can reload the file at any time with `.load()`.\r\n\r\nInspect project:\r\n\r\n    >>> project.info['author'] \r\n    u'blob8108'\r\n    >>> project.stage\r\n    <Stage(Stage)>\r\n    \r\nList fields on object:\r\n\r\n    >>> project.stage.fields.keys()\r\n    ['volume', 'hPan', 'sprites', 'lists', 'name', 'obsoleteSavedState', \r\n    'color', 'media', 'variables', 'bounds', 'submorphs', 'zoom', 'isClone', \r\n    'flags', 'costume', 'scripts', 'owner', 'tempoBPM', 'vPan', 'properties', 'sceneStates']\r\n\r\nAccess fields using dot notation:\r\n\r\n    >>> project.stage.tempoBPM\r\n    60\r\n    >>> project.stage.sprites\r\n    [<Sprite(ScratchCat)>]\r\n\r\nList sprites:\r\n\r\n    >>> project.sprites             # alias for `project.stage.sprites`\r\n    [<Sprite(ScratchCat)>]\r\n    >>> cat = project.sprites[0]\r\n    >>> cat.name\r\n    'ScratchCat'\r\n\r\nCan also index sprites list by name:\r\n\r\n    >>> cat = project.sprites['ScratchCat']\r\n\r\nMost of the objects you're interested in, like `Stage` and `Sprite`, inherit from `UserObject`. You can use `.fields.keys()` to see the\r\navailable fields on one of these objects.\r\n\r\n`FixedObjects` like `Rectangle` have a `.value` property to access their value.\r\n\r\n    >>> project.stage.bounds\r\n    Rectangle([0, 0, 480, 360])\r\n    >>> project.stage.bounds.value\r\n    [0, 0, 480, 360]\r\n\r\nInline objects, such as `int` and `bool`, are converted transparently to their Pythonic counterparts. `Array` and `Dictionary` are converted to `list` and `dict`, too. \r\n\r\nMake changes:\r\n\r\n    >>> cat.vars # {u'vx': 0.0}\r\n    >>> cat.vars['vx'] = 100\r\n\r\nSave:\r\n\r\n    >>> project.save()\r\n\r\nNow re-open the project with Scratch!\r\n\r\nEverything should, of course, work perfectly; if you do have any problems, please send me an email or [file an issue on Github](https://github.com/blob8108/kurt/issues/new), and I'll take a look! (:\r\n\r\n\r\n### Scripts\r\nA list of scripts can be found on the `scripts` property of both sprites and the stage.\r\n\r\n    >>> cat.scripts\r\n    [Script(Point(23, 36.0), [\r\n        Block('EventHatMorph', 'Scratch-StartClicked'),\r\n        Block('xpos:', 0),\r\n        Block('doForever',  [\r\n                Block('doIf', \r\n                    Block('keyPressed:', 'right arrow'),\r\n                    [\r\n                        Block('changeVariable', u'vx', <#changeVar:by:>, 2),\r\n                    ]),\r\n                Block('doIf', \r\n                    Block('keyPressed:', 'left arrow'),\r\n                    [\r\n                        Block('changeVariable', u'vx', <#changeVar:by:>, -2),\r\n                    ]),\r\n                Block('changeVariable', u'vx', <#setVar:to:>, \r\n                    Block('*', \r\n                        Block('readVariable', u'vx'),\r\n                    0.80000000000000004),\r\n                ),\r\n                Block('changeXposBy:', \r\n                    Block('readVariable', u'vx'),\r\n                ),\r\n            ])])]\r\n\r\nUse the `to_block_plugin` method to print them nicely:\r\n\r\n    >>> print cat.scripts[0].to_block_plugin()\r\n    when green flag clicked\r\n    set x to (0)\r\n    forever\r\n        if <key [right arrow v] pressed?>\r\n            change [vx v] by (2)\r\n        end\r\n        if <key [left arrow v] pressed?>\r\n            change [vx v] by (-2)\r\n        end\r\n        set [vx v] to ((vx) * (0.8))\r\n        change x by (vx)\r\n    end\r\n\r\nThis is identical to `scratchblocks` format, so you can paste them straight into the Scratch forums or wiki. [See here](http://dl.dropbox.com/u/9598124/blocksplugin.html#when%2520green%2520flag%2520clicked%250Aset%2520x%2520to%2520%280%29%250Aforever%250A%2520%2520%2520%2520if%2520%253Ckey%2520%255Bright%2520arrow%2520v%255D%2520pressed%3F%253E%250A%2520%2520%2520%2520%2520%2520%2520%2520change%2520%255Bvx%2520v%255D%2520by%2520%282%29%250A%2520%2520%2520%2520end%250A%2520%2520%2520%2520if%2520%253Ckey%2520%255Bleft%2520arrow%2520v%255D%2520pressed%3F%253E%250A%2520%2520%2520%2520%2520%2520%2520%2520change%2520%255Bvx%2520v%255D%2520by%2520%28-2%29%250A%2520%2520%2520%2520end%250A%2520%2520%2520%2520set%2520%255Bvx%2520v%255D%2520to%2520%28%28vx%29%2520%2A%2520%280.8%29%29%250A%2520%2520%2520%2520change%2520x%2520by%2520%28vx%29%250Aend).\r\n\r\nSee [Scripts](https://github.com/blob8108/kurt/wiki/Script) on the kurt wiki.\r\n\r\n\r\n### Images\r\nYou can find costumes under a sprite's `costumes` property (similarly for stage `backgrounds`).\r\n\r\n    >>> cat.costumes # [<ImageMedia(costume1)>, <ImageMedia(costume2)>]\r\n    >>> image = cat.costumes[0]\r\n\r\nSave to an external file:\r\n\r\n    >>> image.save(\"scratch_cat.png\")\r\n\r\n\r\n### General Notes\r\n\r\nAssigning directly to attributes, particularly `project.sprites` or `stage.scripts`, is generally a bad idea. Instead, modify the lists in-place by using `.append`, etc.\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Recent Changes \r\n\r\n###v1.4, compiler:\r\n\r\n* New PLY-based \"block plugin\" syntax parser\r\n* Switch to PIL to support more image formats\r\n* Improved compiler\r\n* Optimised image loading\r\n* Optimised project saving\r\n* Single `kurtc.py` script with compile/decompile commands\r\n\r\nLibrary changes:\r\n* Rename Sprite.vars, Stage.vars -> .variables\r\n* Rename ImageMedia -> Image; SoundMedia -> Sound\r\n* Make Block, Script constructors & repr messages more sensible\r\n* Sprites list now supports indexing by name (as well as index)\r\n\r\n\r\n###v1.3, decompiler:\r\n\r\n* Can now build projects entirely \"from scratch\" (as it were) in Python code using `ScratchProjectFile.new()`\r\n* **Decompiler** to export all images, scripts from .sb file as PNG/JPG format and scratchblocks text files\r\n* Experimental **compiler** for making .sb files, the reverse of decompiler\r\n* *Highly* experimental scratchblocks **parser** for generating scripts\r\n* Most **images** now work! Details:\r\n    * Images with depth 1 and 2 now work — (fixed some buggy reverse-engineered code).\r\n    * Default color values (\"squeak_colors\") now work — fixed a bug saving all-white stage background.\r\n\r\n\r\n###v1.2, images:\r\n\r\n* Can now parse images! :D\r\n\r\n    Well, most images. If not, try reloading the project with Scratch and saving it again — this sometimes helps.\r\n    \r\n    Unfortunately, Kurt doesn't compress the images when saving them back to the file again (yet), so it may massively increase your file size :P Again, you can just open it in Scratch and save it again, and the file size will be back to normal.\r\n\r\n* Split Sprite.media into separate costumes/sounds lists.\r\n\r\n\r\n###v1.1, scripts:\r\n\r\n* `Script` and `Block` classes for manipulating scripts.\r\n* **Block plugin** formatter — reads all the scripts in a project file and outputs `[scratchblocks]` syntax code for posting on the Scratch forums/wiki.\r\n* Filled out the `_fields` list for most of the objects in `user_objects` from the Squeak source (not the unused ones), so there should now be no \"undefined\" fields.\r\n* `Color` is now parsed correctly\r\n* Added `ScratchProjectFile.sprites` shortcut as an alias for `project.stage.sprites`\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Licence\r\n\r\nKurt is released under the [LGPL](http://www.gnu.org/licenses/lgpl) Version 3 (or any later version).\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Todo\r\n\r\n* ~~Import images from a separate `.png` or `.jpg` file and save them into a Scratch file.~~ DONE!\r\n\r\n* ~~\"Default project\" for building projects entirely \"from scratch\" (as it were) in Python code?~~ DONE!\r\n\r\n* ~~Compiler~~ DONE!\r\n\r\n* ~~Optimise `ObjectNetworkAdapter` for building large files.~~ DONE\r\n\r\n* ~~Optimise image parsing.~~ DONE\r\n\r\n* ~~Parse images~~ DONE! :D\r\n    * Compress Bitmap to ByteArray on save (using run-length encoding)\r\n    * Images with depth `16` are not supported *(need an example)*\r\n\r\n* Read/write external Sound files\r\n\r\n* Make some decent tests\r\n\r\n\r\n\r\n<!----------------------------------------------------------------------------->\r\n\r\n## Notes\r\n\r\n<a name=\"note1\"></a>*project summary* — a txt file with the detail of the project such as scripts in text form. Obtained by shift-clicking Scratch's \"File\" menu and choosing \"Write project summary\".\r\n","name":"kurt","tagline":"Scratch project files  <--->  Python  <--->  Scratchblocks code & images","note":"Don't delete this file! It's used internally to help with page regeneration."}